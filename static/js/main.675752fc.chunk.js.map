{"version":3,"sources":["components/card.js","components/cardlist.js","components/search.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Search","type","placeholder","onChange","handleChange","App","onSearchChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GACjB,OAAQ,sBAAKC,UAAU,iBAAf,UACJ,qBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACF,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJbC,EAAW,SAAAR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,UCJhCM,G,MAAS,SAACX,GAAD,OAClB,uBACAC,UAAU,SACVW,KAAK,SACLC,YAAcb,EAAMa,YACpBC,SAAWd,EAAMe,iBCmCNC,G,wDArCb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAO,CACVd,SAAW,GACXW,YAAY,IAJH,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACV,SAASmB,S,oBAO1C,WAAS,IAAD,EACyBC,KAAKN,MAA7Bd,EADD,EACCA,SAASW,EADV,EACUA,YACVU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYc,wBAElD,OACE,sBAAKjC,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAAQY,YAAY,qBACnBE,aAAgBc,KAAKZ,iBAEtB,cAAC,EAAD,CAAUR,SAAUqB,W,GA/BRK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.675752fc.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nexport const Card = props=>{\n   return( <div className=\"card-container\">\n       <img\n       alt='monster' \n       src={`https://robohash.org/${props.monster.id}?set=set2`}></img>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n   )}","import React from 'react';\nimport './cardlist.css';\nimport {Card} from \"./card\";\n\n\nexport const CardList = props=>{\n   return <div className=\"card-list\">\n       {props.monsters.map(monster=>(\n        <Card monster={monster} key={monster.id}></Card>\n      ))}\n   </div>\n}\n\n\n","import React from 'react';\nimport './search.css'\n\n\nexport const Search = (props)=>(\n    <input\n    className='search' \n    type='search'\n    placeholder= {props.placeholder} \n    onChange= {props.handleChange}\n    ></input>\n)","import React,{Component} from 'react';\nimport {CardList} from './components/cardlist';\nimport {Search} from './components/search';\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state= {\n      monsters : [],\n      searchField:''\n    }\n\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users=> this.setState({monsters:users}));\n  }\n\n  onSearchChange = (e)=>{\n    this.setState({searchField: e.target.value});\n  }\n\n  render(){\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n    return(\n      <div className=\"App\">\n      <h1>MONSTERS ROLODEX</h1>\n      <Search placeholder='search the monster'\n       handleChange = {this.onSearchChange}\n      />\n      <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}